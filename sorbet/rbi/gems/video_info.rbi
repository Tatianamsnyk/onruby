# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strong
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/video_info/all/video_info.rbi
#
# video_info-2.7
class VideoInfo
  def ==(other); end
  def _providers_const; end
  def _select_provider(url, options); end
  def author(*args, &block); end
  def author_thumbnail(*args, &block); end
  def author_url(*args, &block); end
  def available?(*args, &block); end
  def data(*args, &block); end
  def data=(*args, &block); end
  def date(*args, &block); end
  def description(*args, &block); end
  def duration(*args, &block); end
  def embed_code(*args, &block); end
  def embed_url(*args, &block); end
  def ensure_enabled_provider(provider); end
  def height(*args, &block); end
  def initialize(url, options = nil); end
  def keywords(*args, &block); end
  def playlist_id(*args, &block); end
  def provider(*args, &block); end
  def self.disable_providers; end
  def self.disable_providers=(arg0); end
  def self.disabled_provider?(provider); end
  def self.get(*args); end
  def self.logger; end
  def self.logger=(arg0); end
  def self.provider_api_keys; end
  def self.provider_api_keys=(api_keys); end
  def self.usable?(url); end
  def thumbnail(*args, &block); end
  def thumbnail_large(*args, &block); end
  def thumbnail_maxres(*args, &block); end
  def thumbnail_medium(*args, &block); end
  def thumbnail_small(*args, &block); end
  def title(*args, &block); end
  def url(*args, &block); end
  def video_id(*args, &block); end
  def video_owner(*args, &block); end
  def videos(*args, &block); end
  def view_count(*args, &block); end
  def width(*args, &block); end
  extend Forwardable
end
class VideoInfo::Provider
  def _api_url; end
  def _clean_options(options); end
  def _embed_url(options); end
  def _hash_to_attributes(hash); end
  def _hash_to_params(hash); end
  def _http_header_field(key); end
  def _http_response_code(http); end
  def _https_response_code(http); end
  def _not_openuri_option_symbol?(key); end
  def _response_code; end
  def _set_data_from_api(api_url = nil); end
  def _set_data_from_api_impl(api_url); end
  def _set_video_id_from_url; end
  def _url_regex; end
  def _valid_video_id?; end
  def available?; end
  def data; end
  def data=(arg0); end
  def embed_code(options = nil); end
  def iframe_attributes; end
  def iframe_attributes=(arg0); end
  def initialize(url, options = nil); end
  def log_warn(message); end
  def options; end
  def options=(arg0); end
  def self.usable?(_url); end
  def thumbnail; end
  def url; end
  def url=(arg0); end
  def video_id; end
  def video_id=(arg0); end
end
module VideoInfo::Providers
end
class VideoInfo::Providers::Dailymotion < VideoInfo::Provider
  def _api_base; end
  def _api_path; end
  def _api_url; end
  def _default_iframe_attributes; end
  def _default_url_attributes; end
  def _response_code; end
  def _url_regex; end
  def author; end
  def author_thumbnail; end
  def author_url; end
  def date; end
  def description; end
  def duration; end
  def embed_url; end
  def height; end
  def keywords; end
  def provider; end
  def self.usable?(url); end
  def thumbnail_large; end
  def thumbnail_medium; end
  def thumbnail_small; end
  def title; end
  def view_count; end
  def width; end
end
class VideoInfo::Providers::Vkontakte < VideoInfo::Provider
  def _api_base; end
  def _api_path; end
  def _api_url; end
  def _data_hash; end
  def _default_iframe_attributes; end
  def _default_url_attributes; end
  def _error_found?(response); end
  def _get_response_code(response); end
  def _make_request(url, options); end
  def _response_code; end
  def _set_data_from_api_impl(api_url); end
  def _set_video_id_from_url; end
  def _url_regex; end
  def author; end
  def author_thumbnail; end
  def author_url; end
  def available?; end
  def description; end
  def duration; end
  def embed_url; end
  def get_between(from_here, to_here); end
  def height; end
  def initialize(url, options = nil); end
  def keywords; end
  def provider; end
  def self.usable?(url); end
  def thumbnail_large; end
  def thumbnail_maxres; end
  def thumbnail_medium; end
  def thumbnail_small; end
  def title; end
  def video_owner; end
  def video_owner=(arg0); end
  def view_count; end
  def width; end
end
class VideoInfo::Providers::Wistia < VideoInfo::Provider
  def _api_base; end
  def _api_path; end
  def _api_url; end
  def _default_iframe_attributes; end
  def _default_url_attributes; end
  def _url_regex; end
  def date; end
  def description; end
  def duration; end
  def embed_url; end
  def height; end
  def keywords; end
  def provider; end
  def self.usable?(url); end
  def thumbnail_large; end
  def thumbnail_medium; end
  def thumbnail_small; end
  def title; end
  def view_count; end
  def width; end
end
module VideoInfo::Providers::VimeoAPI
  def _api_base; end
  def _api_path; end
  def _api_url; end
  def _api_version; end
  def _api_version_headers; end
  def _authorization_headers; end
  def _clean_options(options); end
  def _parse_picture_id(uri); end
  def _video; end
  def api_key; end
  def author; end
  def author_thumbnail(width = nil); end
  def author_thumbnail_id; end
  def author_url; end
  def date; end
  def description; end
  def duration; end
  def generate_thumbnail(width = nil, height = nil); end
  def height; end
  def keywords; end
  def keywords_array; end
  def thumbnail_id; end
  def thumbnail_large; end
  def thumbnail_medium; end
  def thumbnail_small; end
  def title; end
  def view_count; end
  def width; end
end
module VideoInfo::Providers::VimeoScraper
  def _api_path; end
  def _api_url; end
  def _set_data_from_api_impl(api_url); end
  def author; end
  def author_thumbnail; end
  def author_url; end
  def available?; end
  def date; end
  def description; end
  def duration; end
  def height; end
  def json_info; end
  def keywords; end
  def meta_node_value(name); end
  def meta_nodes; end
  def remove_overlay(url); end
  def thumbnail_large; end
  def thumbnail_medium; end
  def thumbnail_small; end
  def thumbnail_url; end
  def title; end
  def view_count; end
  def width; end
end
class VideoInfo::Providers::Vimeo < VideoInfo::Provider
  def _default_iframe_attributes; end
  def _default_url_attributes; end
  def _url_regex; end
  def embed_url; end
  def initialize(url, options = nil); end
  def provider; end
  def self.usable?(url); end
end
module VideoInfo::Providers::YoutubeAPI
  def _api_base; end
  def _api_path; end
  def _api_url; end
  def _channel_api_url(channel_id); end
  def _channel_info; end
  def _channel_snippet; end
  def _video_content_details; end
  def _video_snippet; end
  def _video_statistics; end
  def _video_thumbnail(id); end
  def api_key; end
  def author; end
  def author_thumbnail; end
  def author_url; end
  def available?; end
  def date; end
  def description; end
  def duration; end
  def keywords; end
  def title; end
  def view_count; end
end
module VideoInfo::Providers::YoutubeScraper
  def _api_url; end
  def _set_data_from_api_impl(api_url); end
  def author; end
  def author_thumbnail; end
  def author_url; end
  def available?; end
  def date; end
  def description; end
  def duration; end
  def itemprop_node_value(name); end
  def keywords; end
  def meta_node_value(name); end
  def meta_nodes; end
  def title; end
  def view_count; end
end
class VideoInfo::Providers::Youtube < VideoInfo::Provider
  def _default_iframe_attributes; end
  def _default_url_attributes; end
  def _url_regex; end
  def embed_url; end
  def height; end
  def initialize(url, options = nil); end
  def provider; end
  def self.usable?(url); end
  def thumbnail_large; end
  def thumbnail_maxres; end
  def thumbnail_medium; end
  def thumbnail_small; end
  def width; end
end
module VideoInfo::YoutubePlaylistAPI
  def _api_path; end
  def _playlist_entry; end
  def _playlist_items; end
  def _playlist_items_api_path; end
  def _playlist_items_api_url; end
  def _playlist_items_data; end
  def _playlist_video_ids; end
  def available?; end
  def date; end
  def description; end
  def duration; end
  def thumbnail_large; end
  def thumbnail_medium; end
  def thumbnail_small; end
  def videos; end
  def view_count; end
end
module VideoInfo::Providers::YoutubePlaylistScraper
  def author; end
  def author_thumbnail; end
  def author_url; end
  def available?; end
  def date; end
  def duration; end
  def keywords; end
  def thumbnail_large; end
  def thumbnail_medium; end
  def thumbnail_small; end
  def videos; end
  def view_count; end
end
class VideoInfo::Providers::YoutubePlaylist < VideoInfo::Providers::Youtube
  def _url_regex; end
  def date; end
  def duration; end
  def embed_url; end
  def initialize(url, options = nil); end
  def keywords; end
  def playlist_id; end
  def playlist_items_data; end
  def playlist_items_data=(arg0); end
  def self.usable?(url); end
  def view_count; end
end
class VideoInfo::Error < StandardError
end
class VideoInfo::UrlError < VideoInfo::Error
end
class VideoInfo::HttpError < VideoInfo::Error
end
