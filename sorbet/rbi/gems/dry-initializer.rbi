# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strong
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/dry-initializer/all/dry-initializer.rbi
#
# dry-initializer-2.3.0
module Dry::Initializer
  def dry_initializer; end
  def inherited(klass); end
  def option(name, type = nil, **opts); end
  def param(name, type = nil, **opts); end
  extend Dry::Initializer::DSL
end
module Dry::Initializer::DSL
  def [](undefined: nil, **arg1); end
  def define(procedure = nil, &block); end
  def extended(klass); end
  def null; end
  def self.extended(mod); end
end
class Dry::Initializer::Definition
  def ==(other); end
  def check_default(value); end
  def check_source(value); end
  def check_target(value); end
  def check_type(value); end
  def code; end
  def default; end
  def desc; end
  def inch; end
  def initialize(option, null, source, coercer = nil, **options); end
  def inspect; end
  def ivar; end
  def name; end
  def null; end
  def option; end
  def optional; end
  def options; end
  def prepare_reader(value); end
  def reader; end
  def source; end
  def target; end
  def to_s; end
  def to_str; end
  def type; end
end
module Dry::Initializer::Builders
end
class Dry::Initializer::Builders::Reader
  def attribute_line; end
  def call; end
  def initialize(definition); end
  def lines; end
  def method_lines; end
  def self.[](definition); end
  def type_line; end
  def undef_line; end
end
class Dry::Initializer::Builders::Signature
  def call; end
  def initialize(config); end
  def optional_params; end
  def options; end
  def required_params; end
  def self.[](config); end
end
class Dry::Initializer::Builders::Attribute
  def assignment_line; end
  def call; end
  def coercion_line; end
  def default_line; end
  def definition_line; end
  def initialize(definition); end
  def lines; end
  def optional_reader; end
  def reader_line; end
  def required_reader; end
  def self.[](definition); end
end
class Dry::Initializer::Builders::Initializer
  def call; end
  def define_line; end
  def end_line; end
  def initialize(config); end
  def lines; end
  def options_lines; end
  def params_lines; end
  def private_line; end
  def self.[](config); end
  def undef_line; end
end
class Dry::Initializer::Config
  def add_definition(option, name, type, opts); end
  def attributes(instance); end
  def check_order_of_params; end
  def check_type(previous, current); end
  def children; end
  def code; end
  def definitions; end
  def extended_class; end
  def final_definitions; end
  def finalize; end
  def inch; end
  def initialize(extended_class = nil, null: nil); end
  def mixin; end
  def null; end
  def option(name, type = nil, **opts); end
  def options; end
  def param(name, type = nil, **opts); end
  def params; end
  def parent; end
  def public_attributes(instance); end
end
module Dry::Initializer::Mixin
  def self.extended(klass); end
  extend Dry::Initializer::DSL
  include Dry::Initializer
end
module Dry::Initializer::Mixin::Root
  def initialize(*args); end
end
module Dry::Initializer::Mixin::Local
  def included(klass); end
  def inspect; end
  def klass; end
  def to_s; end
  def to_str; end
end
module Dry
end
