# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/acts_as_api/all/acts_as_api.rbi
#
# acts_as_api-1.0.1
module ActsAsApi
end
module ActsAsApi::Collection
  def as_api_response(api_template, options = nil); end
end
module ActsAsApi::RailsRenderer
  def self.setup; end
end
class ActsAsApi::ActsAsApiError < RuntimeError
end
class ActsAsApi::TemplateNotFoundError < ActsAsApi::ActsAsApiError
end
module ActsAsApi::Base
  def acts_as_api; end
  def acts_as_api?; end
end
module ActsAsApi::Base::ClassMethods
  def acts_as_api?; end
  def api_accessible(api_template, options = nil, &block); end
  def api_accessible_attributes(api_template); end
end
module ActsAsApi::Base::InstanceMethods
  def after_api_response(_api_template); end
  def around_api_response(_api_template); end
  def as_api_response(api_template, options = nil); end
  def before_api_response(_api_template); end
end
module ActsAsApi::Rendering
  def render_for_api(api_template_or_options, render_options); end
end
class Array
  include ActsAsApi::Collection
end
class ActiveRecord::Base
  extend ActsAsApi::Base
end
class ActiveRecord::Relation
  include ActsAsApi::Collection
end
class ActiveRecord::Associations::CollectionProxy < ActiveRecord::Relation
  include ActsAsApi::Collection
end
class ActiveRecord::AssociationRelation < ActiveRecord::Relation
  include ActsAsApi::Collection
end
class ActionController::Base < ActionController::Metal
  include ActsAsApi::Rendering
end
module ActionController::Renderers
  def _render_with_renderer_acts_as_api_jsonp(json, options); end
end
class ActsAsApi::ApiTemplate < Hash
  def add(val, options = nil); end
  def allowed_to_render?(fieldset, field, model, options); end
  def api_template; end
  def api_template=(arg0); end
  def api_template_for(fieldset, field); end
  def call_proc(the_proc, model, options); end
  def condition_fulfilled?(model, condition, options); end
  def initialize(api_template); end
  def merge!(other_hash, &block); end
  def option_for(field, option); end
  def options; end
  def options_for(field); end
  def process_value(model, value, options); end
  def remove(field); end
  def to_response_hash(model, fieldset = nil, options = nil); end
end
