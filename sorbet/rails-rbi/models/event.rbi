# This is an autogenerated file for dynamic methods in Event
# Please rerun rake rails_rbi:models to regenerate.
# typed: strong

class Event::ActiveRecord_Relation < ActiveRecord::Relation
  include Event::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: Event)
end

class Event::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  include Event::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: Event)
end

class Event < ApplicationRecord
  extend T::Sig
  extend T::Generic
  extend Event::ModelRelationShared
  include Event::InstanceMethods
  Elem = type_template(fixed: Event)
end

module Event::InstanceMethods
  extend T::Sig

  sig { returns(T.nilable(DateTime)) }
  def created_at(); end

  sig { params(value: T.nilable(DateTime)).void }
  def created_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def created_at?(*args); end

  sig { returns(T.nilable(DateTime)) }
  def date(); end

  sig { params(value: T.nilable(DateTime)).void }
  def date=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def date?(*args); end

  sig { returns(T.nilable(String)) }
  def description(); end

  sig { params(value: T.nilable(String)).void }
  def description=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def description?(*args); end

  sig { returns(T.nilable(Integer)) }
  def github_issue(); end

  sig { params(value: T.nilable(Integer)).void }
  def github_issue=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def github_issue?(*args); end

  sig { returns(Integer) }
  def id(); end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def id?(*args); end

  sig { returns(T.nilable(String)) }
  def label(); end

  sig { params(value: T.nilable(String)).void }
  def label=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def label?(*args); end

  sig { returns(T.nilable(Integer)) }
  def limit(); end

  sig { params(value: T.nilable(Integer)).void }
  def limit=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def limit?(*args); end

  sig { returns(T.nilable(Integer)) }
  def location_id(); end

  sig { params(value: T.nilable(Integer)).void }
  def location_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def location_id?(*args); end

  sig { returns(T.nilable(String)) }
  def name(); end

  sig { params(value: T.nilable(String)).void }
  def name=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def name?(*args); end

  sig { returns(T.nilable(T::Boolean)) }
  def published(); end

  sig { params(value: T.nilable(T::Boolean)).void }
  def published=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def published?(*args); end

  sig { returns(T.nilable(DateTime)) }
  def updated_at(); end

  sig { params(value: T.nilable(DateTime)).void }
  def updated_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def updated_at?(*args); end

  sig { returns(T.nilable(Integer)) }
  def user_id(); end

  sig { params(value: T.nilable(Integer)).void }
  def user_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def user_id?(*args); end

end

class Event
  extend T::Sig

  sig { returns(T.nilable(::Location)) }
  def location(); end

  sig { params(value: T.nilable(::Location)).void }
  def location=(value); end

  sig { returns(::Material::ActiveRecord_Associations_CollectionProxy) }
  def materials(); end

  sig { params(value: T.any(T::Array[::Material], ::Material::ActiveRecord_Associations_CollectionProxy)).void }
  def materials=(value); end

  sig { returns(::Participant::ActiveRecord_Associations_CollectionProxy) }
  def participants(); end

  sig { params(value: T.any(T::Array[::Participant], ::Participant::ActiveRecord_Associations_CollectionProxy)).void }
  def participants=(value); end

  sig { returns(::Topic::ActiveRecord_Associations_CollectionProxy) }
  def topics(); end

  sig { params(value: T.any(T::Array[::Topic], ::Topic::ActiveRecord_Associations_CollectionProxy)).void }
  def topics=(value); end

  sig { returns(T.nilable(::User)) }
  def user(); end

  sig { params(value: T.nilable(::User)).void }
  def user=(value); end

  sig { returns(::User::ActiveRecord_Associations_CollectionProxy) }
  def users(); end

  sig { params(value: T.any(T::Array[::User], ::User::ActiveRecord_Associations_CollectionProxy)).void }
  def users=(value); end

end

module Event::ModelRelationShared
  extend T::Sig

  sig { returns(Event::ActiveRecord_Relation) }
  def all(); end

  sig { params(block: T.nilable(T.proc.void)).returns(Event::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped).returns(Event::ActiveRecord_Relation) }
  def current(*args); end

  sig { params(args: T.untyped).returns(Event::ActiveRecord_Relation) }
  def latest(*args); end

  sig { params(args: T.untyped).returns(Event::ActiveRecord_Relation) }
  def ordered(*args); end

  sig { params(args: T.untyped).returns(Event::ActiveRecord_Relation) }
  def unpublished(*args); end

  sig { params(args: T.untyped).returns(Event::ActiveRecord_Relation) }
  def with_topics(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Event::ActiveRecord_Relation) }
  def select(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Event::ActiveRecord_Relation) }
  def reselect(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Event::ActiveRecord_Relation) }
  def order(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Event::ActiveRecord_Relation) }
  def reorder(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Event::ActiveRecord_Relation) }
  def group(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Event::ActiveRecord_Relation) }
  def limit(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Event::ActiveRecord_Relation) }
  def offset(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Event::ActiveRecord_Relation) }
  def joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Event::ActiveRecord_Relation) }
  def left_joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Event::ActiveRecord_Relation) }
  def left_outer_joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Event::ActiveRecord_Relation) }
  def where(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Event::ActiveRecord_Relation) }
  def rewhere(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Event::ActiveRecord_Relation) }
  def preload(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Event::ActiveRecord_Relation) }
  def extract_associated(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Event::ActiveRecord_Relation) }
  def eager_load(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Event::ActiveRecord_Relation) }
  def includes(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Event::ActiveRecord_Relation) }
  def from(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Event::ActiveRecord_Relation) }
  def lock(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Event::ActiveRecord_Relation) }
  def readonly(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Event::ActiveRecord_Relation) }
  def extending(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Event::ActiveRecord_Relation) }
  def or(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Event::ActiveRecord_Relation) }
  def having(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Event::ActiveRecord_Relation) }
  def create_with(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Event::ActiveRecord_Relation) }
  def distinct(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Event::ActiveRecord_Relation) }
  def references(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Event::ActiveRecord_Relation) }
  def none(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Event::ActiveRecord_Relation) }
  def unscope(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Event::ActiveRecord_Relation) }
  def optimizer_hints(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Event::ActiveRecord_Relation) }
  def merge(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Event::ActiveRecord_Relation) }
  def except(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Event::ActiveRecord_Relation) }
  def only(*args, &block); end

end
