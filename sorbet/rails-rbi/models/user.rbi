# This is an autogenerated file for dynamic methods in User
# Please rerun rake rails_rbi:models to regenerate.
# typed: strong

class User::ActiveRecord_Relation < ActiveRecord::Relation
  include User::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: User)
end

class User::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  include User::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: User)
end

class User < ApplicationRecord
  extend T::Sig
  extend T::Generic
  extend User::ModelRelationShared
  include User::InstanceMethods
  Elem = type_template(fixed: User)
end

module User::InstanceMethods
  extend T::Sig

  sig { returns(T.nilable(T::Boolean)) }
  def admin(); end

  sig { params(value: T.nilable(T::Boolean)).void }
  def admin=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def admin?(*args); end

  sig { returns(T.nilable(T::Boolean)) }
  def available(); end

  sig { params(value: T.nilable(T::Boolean)).void }
  def available=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def available?(*args); end

  sig { returns(T.nilable(DateTime)) }
  def created_at(); end

  sig { params(value: T.nilable(DateTime)).void }
  def created_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def created_at?(*args); end

  sig { returns(T.nilable(String)) }
  def description(); end

  sig { params(value: T.nilable(String)).void }
  def description=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def description?(*args); end

  sig { returns(T.nilable(String)) }
  def email(); end

  sig { params(value: T.nilable(String)).void }
  def email=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def email?(*args); end

  sig { returns(T.nilable(T::Boolean)) }
  def freelancer(); end

  sig { params(value: T.nilable(T::Boolean)).void }
  def freelancer=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def freelancer?(*args); end

  sig { returns(T.nilable(String)) }
  def github(); end

  sig { params(value: T.nilable(String)).void }
  def github=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def github?(*args); end

  sig { returns(T.nilable(T::Boolean)) }
  def hide_jobs(); end

  sig { params(value: T.nilable(T::Boolean)).void }
  def hide_jobs=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def hide_jobs?(*args); end

  sig { returns(Integer) }
  def id(); end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def id?(*args); end

  sig { returns(T.nilable(String)) }
  def image(); end

  sig { params(value: T.nilable(String)).void }
  def image=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def image?(*args); end

  sig { returns(T.nilable(String)) }
  def linkedin(); end

  sig { params(value: T.nilable(String)).void }
  def linkedin=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def linkedin?(*args); end

  sig { returns(T.nilable(String)) }
  def location(); end

  sig { params(value: T.nilable(String)).void }
  def location=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def location?(*args); end

  sig { returns(T.nilable(String)) }
  def name(); end

  sig { params(value: T.nilable(String)).void }
  def name=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def name?(*args); end

  sig { returns(T.nilable(String)) }
  def nickname(); end

  sig { params(value: T.nilable(String)).void }
  def nickname=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def nickname?(*args); end

  sig { returns(T.nilable(T::Boolean)) }
  def super_admin(); end

  sig { params(value: T.nilable(T::Boolean)).void }
  def super_admin=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def super_admin?(*args); end

  sig { returns(T.nilable(String)) }
  def twitter(); end

  sig { params(value: T.nilable(String)).void }
  def twitter=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def twitter?(*args); end

  sig { returns(T.nilable(DateTime)) }
  def updated_at(); end

  sig { params(value: T.nilable(DateTime)).void }
  def updated_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def updated_at?(*args); end

  sig { returns(T.nilable(String)) }
  def url(); end

  sig { params(value: T.nilable(String)).void }
  def url=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def url?(*args); end

end

class User
  extend T::Sig

  sig { returns(::Authorization::ActiveRecord_Associations_CollectionProxy) }
  def authorizations(); end

  sig { params(value: T.any(T::Array[::Authorization], ::Authorization::ActiveRecord_Associations_CollectionProxy)).void }
  def authorizations=(value); end

  sig { returns(::Event::ActiveRecord_Associations_CollectionProxy) }
  def events(); end

  sig { params(value: T.any(T::Array[::Event], ::Event::ActiveRecord_Associations_CollectionProxy)).void }
  def events=(value); end

  sig { returns(::Topic::ActiveRecord_Associations_CollectionProxy) }
  def liked_topics(); end

  sig { params(value: T.any(T::Array[::Topic], ::Topic::ActiveRecord_Associations_CollectionProxy)).void }
  def liked_topics=(value); end

  sig { returns(::Like::ActiveRecord_Associations_CollectionProxy) }
  def likes(); end

  sig { params(value: T.any(T::Array[::Like], ::Like::ActiveRecord_Associations_CollectionProxy)).void }
  def likes=(value); end

  sig { returns(::Material::ActiveRecord_Associations_CollectionProxy) }
  def materials(); end

  sig { params(value: T.any(T::Array[::Material], ::Material::ActiveRecord_Associations_CollectionProxy)).void }
  def materials=(value); end

  sig { returns(::Participant::ActiveRecord_Associations_CollectionProxy) }
  def participants(); end

  sig { params(value: T.any(T::Array[::Participant], ::Participant::ActiveRecord_Associations_CollectionProxy)).void }
  def participants=(value); end

  sig { returns(::Event::ActiveRecord_Associations_CollectionProxy) }
  def participations(); end

  sig { params(value: T.any(T::Array[::Event], ::Event::ActiveRecord_Associations_CollectionProxy)).void }
  def participations=(value); end

  sig { returns(::Topic::ActiveRecord_Associations_CollectionProxy) }
  def topics(); end

  sig { params(value: T.any(T::Array[::Topic], ::Topic::ActiveRecord_Associations_CollectionProxy)).void }
  def topics=(value); end

end

module User::ModelRelationShared
  extend T::Sig

  sig { returns(User::ActiveRecord_Relation) }
  def all(); end

  sig { params(block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped).returns(User::ActiveRecord_Relation) }
  def main(*args); end

  sig { params(args: T.untyped).returns(User::ActiveRecord_Relation) }
  def ordered(*args); end

  sig { params(args: T.untyped).returns(User::ActiveRecord_Relation) }
  def organizers(*args); end

  sig { params(args: T.untyped).returns(User::ActiveRecord_Relation) }
  def peers(*args); end

  sig { params(args: T.untyped).returns(User::ActiveRecord_Relation) }
  def random(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def select(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def reselect(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def order(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def reorder(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def group(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def limit(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def offset(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def left_joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def left_outer_joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def where(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def rewhere(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def preload(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def extract_associated(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def eager_load(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def includes(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def from(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def lock(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def readonly(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def extending(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def or(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def having(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def create_with(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def distinct(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def references(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def none(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def unscope(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def optimizer_hints(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def merge(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def except(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::ActiveRecord_Relation) }
  def only(*args, &block); end

end
